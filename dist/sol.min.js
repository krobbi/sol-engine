/**
* @name Sol
* @description Lightweight JavaScript game engine.
* @version 0.1.0
* @license {@link https://krobbi.github.io/license/mit-2020.txt|MIT License}
* @author Chris Roberts (Krobbizoid)
* @copyright 2020 Chris Roberts
*/
var Sol=function(){"use strict";const t={VERSION:"0.1.0",LICENSE:"MIT",LICENSE_URL:"https://krobbi.github.io/license/mit-2020.txt",COPYRIGHT:"Chris Roberts",COPYRIGHT_YEAR:"2020"};function e(){console.log([`%c Sol v${t.VERSION} `,`%c ${t.LICENSE} License - ${t.LICENSE_URL} `,` Copyright (c) ${t.COPYRIGHT_YEAR} ${t.COPYRIGHT} `].join("\n"),"background:#080808;color:#f77f00;font-size:medium;font-weight:bold;","background:#080808;color:#f3d180;")}function s(){const t=[typeof document,typeof document.readyState,typeof setInterval,typeof clearInterval,typeof requestAnimationFrame];for(let e of t)if("undefined"==e)return!1;return!0}function i(t,e,s){return t.hasOwnProperty(e)?t[e]:s}class n{constructor(t={}){this.main=i(t,"main","main"),this.scenes=i(t,"scenes",{})}}class h{constructor(t={}){this.autoStart=!!i(t,"autoStart",!1),this.scene=new n(i(t,"scene",{}))}}class r{constructor(t){this._game=t,this._starting=!1,this._running=!1,this._stopping=!1,this._timeNow=0,this._timeLast=0,this._delta=0}_step(){if(this._delta=(this._timeNow-this._timeLast)/1e3,this._onUpdate(),this._stopping)return this._onStop(),this._running=!1,void(this._stopping=!1);requestAnimationFrame(t=>{this._timeLast=this._timeNow,this._timeNow=t,this._step()})}start(){if(this._starting||this._running&&!this._stopping||!s())return!1;this._starting=!0;const t=setInterval(()=>{this._running||"complete"!=document.readyState||(clearInterval(t),this._running=!0,this._stopping=!1,this._onStart(),this._starting=!1,this._step())});return!0}restart(){return this.stop(),this.start()}stop(){return!(!this._running||this._stopping||(this._stopping=!0,0))}_onStart(){e(),this._game.scene.onStart()}_onUpdate(){this._game.time.onPreTick(this._delta),this._game.scene.onTick(),this._game.scene.onDraw()}_onStop(){this._game.scene.onStop()}get running(){return this._running}}function o(t,e,s){return Math.min(s,Math.max(e,t))}class _{onCreate(t){}onEnter(t){}onTick(t){}onDraw(t){}onExit(t){}onDestroy(t){}}class a{constructor(t,e){this._game=t,this._config=e,this._KEY_DEFAULT="__sol_default__",this._keyActive=this._KEY_DEFAULT,this._keyNext=this._KEY_DEFAULT,this._changing=!1,this._scenes={},this._scenes[this._KEY_DEFAULT]=new _}has(t){return t!=this._KEY_DEFAULT&&t in this._scenes}create(t,e){return t!=this._KEY_DEFAULT&&(this.destroy(t),this._scenes[t]=new e,this._scenes[t].onCreate(this._game),!0)}change(t){return!!this.has(t)&&(this._keyNext=t,this._changing=!0,!0)}reload(){return this.change(this._keyActive)}destroy(t){return!!this.has(t)&&(this._scenes[t].onDestroy(this._game),(t==this._keyActive||this._changing&&t==this._keyNext)&&(this._keyActive=this._KEY_DEFAULT,this._keyNext=this._KEY_DEFAULT,this._changing=!1),delete this._scenes[t],!0)}onStart(){for(let t in this._config.scenes)this.create(t,this._config.scenes[t]);this.change(this._config.main)}onTick(){this._changing&&(this._scenes[this._keyActive].onExit(this._game),this._keyActive=this._keyNext,this._changing=!1,this._scenes[this._keyActive].onEnter(this._game)),this._scenes[this._keyActive].onTick(this._game)}onDraw(){this._scenes[this._keyActive].onDraw(this._game)}onStop(){for(let t in this._scenes)this.destroy(t)}get(t){return this.has(t)?this._scenes[t]:null}get key(){return this._keyActive}get changing(){return this._changing}get active(){return this._scenes[this._keyActive]}get keys(){const t=[];for(let e in this._scenes)this.has(e)&&t.push(e);return t}}class c{constructor(){this._MIN_DELTA=1e-5,this._MAX_DELTA=1,this._delta=1,this._fps=1}onPreTick(t){this._delta=o(t,this._MIN_DELTA,this._MAX_DELTA),this._fps=1/t}get delta(){return this._delta}get fps(){return this._fps}}function g(t,e){for(let s in e)e.hasOwnProperty(s)&&"object"!=typeof e[s]&&"function"!=typeof e[s]&&(t[s]=e[s])}const u={core:{util:{consoleSplash:e,getCompatible:s},Config:h,Loop:r},math:{clamp:o},scene:{SceneManager:a,SceneManagerConfig:n},time:{TimeManager:c},util:{object:{shallowExtend:g,getDefault:i}},Game:class{constructor(t={}){const e=new h(t);this._loop=new r(this),this.scene=new a(this,e.scene),this.time=new c,e.autoStart&&this.start()}start(){return this._loop.start()}restart(){return this._loop.restart()}stop(){return this._loop.stop()}get running(){return this._loop.running}get delta(){return this.time.delta}get fps(){return this.time.fps}},Scene:_};return g(u,t),u}();
